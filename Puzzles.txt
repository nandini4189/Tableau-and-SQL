1. Find missing sequence number.  Table test_number contains the sequence for each id. Table test_number_min_max contains the minimum and maximum number for each id. 
   We need to find the missing number between the minimum and maximum number for each id. text column can be ignored.

SQL> select * from test_number;
        ID        SEQ TEXT
---------- ---------- -----
         1          1 AA
         1          3 CC
         1          4 DD
         1          5 EE
         1          6 FF
         1          7 GG
         1          8 HH
         1         10 JJ
         2          1 KK
         2          2 LL
         2          3 MM
         2          4 NN
         2          6 PP
         2          7 QQ
         3          1 TT	
         3          4 ZZ
         3          5 XX
		 
SQL> select * from test_number_min_max;

        ID         MN         MX
---------- ---------- ----------
         1          1         12
         2          1          9
         3          1          5		 


SELECT r id,rn seq 
FROM 
(SELECT ROWNUM rn FROM all_objects WHERE ROWNUM <13),
(SELECT ROWNUM r FROM all_objects
WHERE ROWNUM <4),test_number_min_max m
WHERE r=id
AND rn >= mn
AND rn <= mx
AND (r,rn) NOT IN
(SELECT id,seq FROM test_number);

/

SELECT r id ,l seq FROM
(SELECT LEVEL l FROM dual
CONNECT BY LEVEL <13),
(SELECT LEVEL r FROM dual CONNECT BY LEVEL <4),
test_number_min_max
WHERE r=id
AND  l>=mn
AND l<=mx
AND (r,l) NOT IN (SELECT id,seq FROM test_number);

---------------------------------------------------------------------------------------------------------------------------------

2. HOW TO TRANSFORM SQL COLUMN INTO ROWS 

STU_NAME                       SUBJECT         MARKS
------------------------------ ---------- ----------
GEORGE                         ECO                77
GEORGE                         HIS                99
GEORGE                         MAT                64
GEORGE                         GEO                85
GEORGE                         SCI                98
ROBERT                         ECO                71
ROBERT                         HIS                90
ROBERT                         MAT                84
ROBERT                         GEO                95
ROBERT                         SCI                58
TIMOTHY                        ECO                56
TIMOTHY                        HIS                55
TIMOTHY                        MAT                67
TIMOTHY                        GEO                54
TIMOTHY                        SCI                45

O/P

STU_NAME                              ECO        GEO        HIS        MAT        SCI
------------------------------ ---------- ---------- ---------- ---------- ----------
GEORGE                                 77         85         99         64         98
ROBERT                                 71         95         90         84         58
TIMOTHY                                56         54         55         67         45

SELECT STU_NAME,MAX(DECODE(SUBJECT,'ECO',MARKS)) ECO,
MAX(DECODE(SUBJECT,'GEO',MARKS)) GEO,
MAX(DECODE(SUBJECT,'HIS',MARKS)) HIS,
MAX(DECODE(SUBJECT,'MAT',MARKS)) MAT,
MAX(DECODE(SUBJECT,'SCI',MARKS)) SCI
FROM COL_TO_ROWS
GROUP BY STU_NAME;

/

SELECT STU_NAME,
MAX(CASE WHEN RN=1 THEN MARKS ELSE 0 END) ECO,
MAX(CASE WHEN RN=2 THEN MARKS ELSE 0 END) GEO,
MAX(CASE WHEN RN=3 THEN MARKS ELSE 0 END) HIS,
MAX(CASE WHEN RN=4 THEN MARKS ELSE 0 END) MAT,
MAX(CASE WHEN RN=5 THEN MARKS ELSE 0 END) SCI FROM
(SELECT STU_NAME,SUBJECT,MARKS, RANK() OVER (PARTITION BY STU_NAME ORDER BY SUBJECT )RN FROM COL_TO_ROWS)
GROUP BY STU_NAME;

---------------------------------------------------------------------------------------------------------------------------------

3. GET THE FOLLOWING OUTPUT

1 L R
—————
1 1 1
1 1 2
1 1 3
1 2 1
1 2 2
1 2 3
1 3 1
1 3 2
1 3 3

SELECT * FROM
(SELECT 1 FROM DUAL),
(SELECT LEVEL L FROM DUAL CONNECT BY LEVEL <4),
(SELECT LEVEL R FROM DUAL CONNECT BY LEVEL <4); 
		 
---------------------------------------------------------------------------------------------------------------------------------

4. OUTPUT SHOULD BE LIKE THIS
 
  KEY      PRICE
---------- ----------
        1         10
        2         20
        3         30
        4         40
        5         50
        6         60
        7         70
        8         80

INSERT INTO <TABLE> 
(KEY,PRICE)  
SELECT LEVEL,LEVEL+(9*LEVEL)  FROM DUAL CONNECT BY LEVEL<=10;		 
		 
---------------------------------------------------------------------------------------------------------------------------------

5. A table has columns with numbers and numbers with alphabets. Write a query to select only those rows which contains alphanumeric values.

SELECT * from alpha_numeric
where length(trim(translate(col1,'1234567890',' ')))>0;

/

select * from alpha_numeric
where regexp_like (col1,'^[a-z]+[0-9]+|^[0-9]+[a-z]+');
		 
---------------------------------------------------------------------------------------------------------------------------------

6. The INNER JOIN – Two Rows PUZZLE  

Table 1 –
Id	Vals
1	Pawan
2	Sharlee
3	Harry
Table 2 –
Id	Vals
1	Kumar
2	Diwan

Expected Output
Id	Vals
1	Pawan
1	Kumar
2	Sharlee
2	Diwan


SELECT ID,VALS FROM 
(SELECT A.* FROM T1N1 A JOIN T1N2 B ON A.ID=B.ID
UNION ALL
SELECT B.* FROM T1N2 B JOIN T1N2 A ON A.ID=B.ID)
ORDER BY ID ;
	 
---------------------------------------------------------------------------------------------------------------------------------

7. Concatenating multiple rows into a single column dynamically.

Teacher_id subject_name
-----------------------
1          Biology
1          Maths
1          Physics
2          English
2          Social


SELECT teacher_id,
       SUBSTR(SYS_CONNECT_BY_PATH(subject_name, '|'),2) 
           subjects_list
FROM 
(
   SELECT  teacher_id,
           subject_name,
           COUNT(*) OVER (PARTITION BY teacher_id) sub_cnt,
           ROW_NUMBER () OVER (PARTITION BY teacher_id ORDER BY subject_name) sub_seq
   FROM    teachers
) A
WHERE             sub_seq=sub_cnt
START WITH        sub_seq=1
CONNECT BY prior  sub_seq+1=sub_seq
AND prior         teacher_id=teacher_id;

output:

teacher_id subjects_list
-------------------------------
1          Biology|Maths|Physics
2          English|Social
	 
---------------------------------------------------------------------------------------------------------------------------------
